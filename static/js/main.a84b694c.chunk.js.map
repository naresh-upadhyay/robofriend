{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","ScrollBar.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","id","name","email","react_default","a","createElement","className","alt","src","concat","CardList","_ref","robots","CardArray","map","value","index","console","log","src_Card","key","SearchBox","searchChange","type","placeholder","onChange","ScrollBar","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchField","target","state","_this2","fetch","then","response","json","users","_this3","filterRobot","filter","robot","toLowerCase","includes","src_SearchBox","src_ScrollBar","src_CardList","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a84b694c.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Card(props) {\n    const { id, name, email } = props;\n    return (\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 \">\n            <img alt={`Robot not found`} src={`https://robohash.org/${id}?set=set2`} />\n            <h2>{name}</h2>\n            <p>{email}</p>\n        </div>\n    );\n}\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) =>{\n    const CardArray = robots.map((value,index) => {\n        console.log('cardlist' , value);\n        return (<Card key={index} id = {robots[index].id} name = {robots[index].name} email = {robots[index].email}/>);\n    });\n    \n    return (\n        <div>\n            {CardArray}\n        </div>\n    );\n}\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n    return (\n        <div className='pa2'>\n            <input\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='Search Robot'\n                onChange={searchChange} />\n        </div>\n    );\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst ScrollBar = (props) =>{\n    return (\n        <div style={{overflowY:'scroll' , border:'1px solid black' , height:'800px'}}>\n            {props.children}\n        </div>\n    );\n}\nexport default ScrollBar;","import React, { Component } from 'react';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport ScrollBar from './ScrollBar';\n//import {robots} from './robots';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchField: ''\n    }\n  }\n  onSearchChange = (event) => {\n    this.setState({ searchField: event.target.value })\n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ robots: users })\n      );\n  }\n  render() {\n    const filterRobot = this.state.robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n    });\n    return (\n      <div className='tc'>\n        <h1 className='f1'>Robofriend Web App</h1>\n        <SearchBox searchChange={this.onSearchChange} />\n        <ScrollBar >\n        <CardList robots={filterRobot} />\n        </ScrollBar>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import CardList from './CardList';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\"\n\nReactDOM.render(<App />, document.getElementById('root'));\n//\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}